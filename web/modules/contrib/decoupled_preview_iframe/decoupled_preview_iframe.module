<?php

/**
 * @file
 * Implements hooks for the decoupled_preview_iframe module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function decoupled_preview_iframe_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.decoupled_preview_iframe':
      return '<p>' . t('Help text for the decoupled_preview_iframe module.') . '</p>';

    default:
      return '';
  }
}

/**
 * Implements hook_theme().
 */
function decoupled_preview_iframe_theme() {

  return [
    'preview_iframe' => [
      'variables' => [
        'url' => NULL,
        'showPublishedToggle' => FALSE,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function decoupled_preview_iframe_form_node_preview_form_select_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('decoupled_preview_iframe.settings');
  $routeName = \Drupal::routeMatch()->getRouteName();
  $bundle = \Drupal::routeMatch()->getParameter('node_preview')->bundle();
  $isBundleEnabled = boolval($config->get('node_types.' . $bundle));

  if ($isBundleEnabled && $routeName === 'entity.node.preview') {
    $form['view_mode']['#access'] = FALSE;
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function decoupled_preview_iframe_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $config = \Drupal::config('decoupled_preview_iframe.settings');
  $preview_types = $config->get('preview_types');
  $enabled_bundles = $preview_types[$entity->getEntityTypeId()] ?? [];
  $isPreviewEnabled = in_array($entity->bundle(), $enabled_bundles);

  if (!$isPreviewEnabled) {
    return;
  }

  // Return early if anything other than default view mode.
  $modes = ['default', 'full'];
  if (!in_array($display->getMode(), $modes)) {
    return;
  }

  $preview_url = $config->get('preview_url');
  if ($preview_url) {
    $current_path = \Drupal::service('path.current')->getPath();
    $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
    $route_match = \Drupal::routeMatch();

    $revisionRoutes = [
      'entity.node.revision',
      'entity.node.latest_version',
    ];
    $isRevisionRoute = in_array($route_match->getRouteName(), $revisionRoutes);

    // Latest version tab should be showing latest revision.
    if ($route_match->getRouteName() === 'entity.node.latest_version') {
      // Get the latest revision.
      /** @var \Drupal\node\Entity\Node $latest_revision */
      $latest_revision = $route_match->getParameter('node');

      // Generate the URL for the revision view page.
      $url = Url::fromRoute('entity.node.revision', [
        'node' => $entity->id(),
        'node_revision' => $latest_revision->getRevisionId(),
      ]);
      $current_path_alias = $url->toString();
    }

    $node_token = '';
    // If the draft provider is set to GraphQL Compose Preview, we need to pass
    // the preview token to the iframe.
    // @todo Add support for other draft providers as JSON:API.
    if ($draft_provider = $config->get('draft_provider')) {
      if ($draft_provider === 'graphql_compose_preview' && $node_preview = \Drupal::routeMatch()->getParameter('node_preview')) {
        $node_token = "?token={$node_preview->preview_token->getString()}";
      }
    }

    // If the entity is not the latest revision, we need to get the latest
    // revisionId to generate the preview URL and replace the current path.
    $draft_path_alias = NULL;
    if (!$isRevisionRoute && !$entity->isLatestRevision()) {
      $revisionId = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->getLatestRevisionId($entity->id());

      // Generate the URL for the revision view page.
      $url = Url::fromRoute('entity.node.revision', [
        'node' => $entity->id(),
        'node_revision' => $revisionId,
      ]);

      $draft_path_alias = $url->toString();
    }

    $preview_iframe_url = $draft_path_alias ?
      "{$preview_url}{$draft_path_alias}{$node_token}" :
      "{$preview_url}{$current_path_alias}{$node_token}";

    // Generate the iframe.
    $build = [];
    $build['#node'] = $entity;
    $build['#entity_type'] = 'node';
    $build['#view_mode'] = $display->getMode();
    $build['iframe'] = [
      '#theme' => 'preview_iframe',
      '#url' => $preview_iframe_url,
      '#showPublishedToggle' => $draft_path_alias !== NULL,
      '#attached' => [
        'library' => [
          'decoupled_preview_iframe/site',
        ],
        'drupalSettings' => [
          'decoupled_preview_iframe' => [
            'selector' => 'iframe.decoupled_preview_iframe',
            'routeSyncType' => $config->get('route_sync'),
            'publishedUrl' => "{$preview_url}{$current_path_alias}{$node_token}",
            'draftUrl' => "{$preview_url}{$draft_path_alias}{$node_token}",
          ],
        ],
      ],
    ];

    $build['#cache']['max-age'] = 0;
  }
}
